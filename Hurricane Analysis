# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]
test=['what is']
# write your update damages function here:
def updated_damages(damage_list):
    updated_damages=[]
    conversion = {"M": 1000000,
              "B": 1000000000}
    for x in damage_list:
        if x == "Damages not recorded":
            updated_damages.append("Damages not recorded")
        elif x[-1:] == "M":\
            updated_damages.append(float(x[:-1])*conversion["M"])
        elif x[-1:] == "B":\
            updated_damages.append(float(x[:-1])*conversion["B"])
    return updated_damages


updated_damage=updated_damages(damages)




# write your construct hurricane dictionary function here:
def hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damage, deaths):
    temp_dictionary = dict()
    num_hurricanes=len(names)
    for index in range(num_hurricanes):
        temp_dictionary[names[index]] = {"Name": names[index],
                          "Month": months[index],
                          "Year": years[index],
                          "Max Sustained Wind": max_sustained_winds[index],
                          "Areas Affected": areas_affected[index],
                          "Damage": updated_damage[index],
                          "Death": deaths[index]}
    return temp_dictionary
hurricane=dict_by_name=hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damage, deaths)
#print(hurricane_by_name)
# write your construct hurricane by year dictionary function here:
def hurricane_by_year(data):
    temp_dict=dict()
    for x in data:
        year=data[x]['Year']
        name=data[x]
        if year not in temp_dict:
            temp_dict[year]=[name]
        else:
            temp_dict[year].append(name)
    return temp_dict


hurricane_by_year=hurricane_by_year(hurricane)








# write your count affected areas function here:
def area(data):
    temp_dict=dict()
    for x in data:
        affected=data[x]['Areas Affected']
        for x in affected:
            if x not in temp_dict:
                temp_dict[x]=1
            else:
                temp_dict[x]+=1
    return temp_dict

affected_area=area(hurricane)




# write your find most affected area function here:
def most_affected_area(data):
    max_affected = 'abc'
    count=0
    for x in data:
        if data[x]>count:
            max_affected = x
            count = data[x]
    return  max_affected, count

most_affected_area=most_affected_area(affected_area)
print(most_affected_area)





# write your greatest number of deaths function here:
def death_count(data):
    name = 'abc'
    deaths = 0
    for x in data:
        alex=data[x]["Death"]
        if alex > deaths:
            name = x
            deaths = alex
    return name, deaths


greatest_num_death = death_count(hurricane)
print(greatest_num_death)




# write your catgeorize by mortality function here:
def highest_mortality(data):
    mortality_scale= {0: 0,
                       1: 100,
                       2: 500,
                       3: 1000,
                       4: 10000}
    hurricanes_by_mortality = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
    for x in data:
        num_death=data[x]["Death"]
        if num_death == mortality_scale[0]:
            hurricanes_by_mortality[0].append(data[x])
        elif num_death > mortality_scale[0] and num_death <= mortality_scale[1]:
            hurricanes_by_mortality[1].append(data[x])
        elif num_death > mortality_scale[1] and num_death <= mortality_scale[2]:
            hurricanes_by_mortality[2].append(data[x])
        elif num_death > mortality_scale[2] and num_death <= mortality_scale[3]:
            hurricanes_by_mortality[3].append(data[x])
        elif num_death > mortality_scale[3] and num_death <= mortality_scale[4]:
            hurricanes_by_mortality[4].append(data[x])
        elif num_death > mortality_scale[4]:
            hurricanes_by_mortality[5].append(data[x])
    return hurricanes_by_mortality





high_mortality=highest_mortality(hurricane)



# write your greatest damage function here:
def highest_damage(data):
    name = 'abc'
    money = 0
    for x in data:
        alex=data[x]["Damage"]
        if alex == 'Damages not recorded':
            continue
        if alex > money:
            money = alex
            name = x
    return name, money

highest_damage = highest_damage(hurricane)






# write your catgeorize by damage function here:
def categorize_by_damage(data):
    damage_scale = {0: 0,
                    1: 100000000,
                    2: 1000000000,
                    3: 10000000000,
                    4: 50000000000}
    hurricanes_by_damage = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
    for x in data:
        num_damage=data[x]["Damage"]
        if num_damage =='Damages not recorded' or num_damage == damage_scale[0]:
            hurricanes_by_damage[0].append(data[x])
        elif num_damage > damage_scale[0] and num_damage <= damage_scale[1]:
            hurricanes_by_damage[1].append(data[x])
        elif num_damage > damage_scale[1] and num_damage <= damage_scale[2]:
            hurricanes_by_damage[2].append(data[x])
        elif num_damage > damage_scale[2] and num_damage <= damage_scale[3]:
            hurricanes_by_damage[3].append(data[x])
        elif num_damage > damage_scale[3] and num_damage <= damage_scale[4]:
            hurricanes_by_damage[4].append(data[x])
        elif num_damage > damage_scale[4]:
            hurricanes_by_damage[5].append(data[x])
    return hurricanes_by_damage

hurricanes_by_damage=categorize_by_damage(hurricane)
print(hurricanes_by_damage[5])
